/*
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 2:

Input: "()[]{}"
Output: true

Idea: Stack: push if opening, pop if closing.
*/

class Solution {
    public boolean isValid(String s) {
        Map<Character, Character> parenthesis = Map.of(
                '(', ')',
                '{', '}',
                '[', ']');
        ArrayDeque<Character> stack = new ArrayDeque<>();
        char[] array = s.toCharArray();

        for (Character ch : array) {
            // ch is opening
            if (parenthesis.containsKey(ch)) {
                stack.addFirst(ch);
            } else {
                // ch is closing
                if (stack.isEmpty()) {
                    return false;
                }
                Character previousOpening = stack.pollFirst();
                if (!ch.equals(parenthesis.get(previousOpening))) {
                    return false;
                }
            }
        }

        return stack.isEmpty();
    }
}
