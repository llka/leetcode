/*
https://leetcode.com/problems/self-dividing-numbers/description/
A self-dividing number is a number that is divisible by every digit it contains.
For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.
Also, a self-dividing number is not allowed to contain the digit zero.
Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.

Example 1:
Input:
left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
*/

public class Solution {
    private static final Logger logger = LogManager.getLogger(Solution.class);

    public List<Integer> selfDividingNumbers(int left, int right) {
        ArrayList<Integer> selfDividingNumbers = new ArrayList<>(right);

        for (int i = left; i <= right; i++) {
            if (isSelfDividiable(i)) {
                logger.info("number = " + i + " is self dividing");
                selfDividingNumbers.add(i);
            }
        }
        return selfDividingNumbers;
    }

    private boolean isSelfDividiable(int number) {
//        String numberString = String.valueOf(number);
//        for (int i = 0; i < numberString.length(); i++) {
//            int divider = Integer.parseInt(String.valueOf(numberString.charAt(i)));
//            if (divider == 0) {
//                return false;
//            }
//            if (number % divider != 0) {
//                return false;
//            }
//        }
//        return true;

        int numberDigits = number;
        while (numberDigits != 0) {
            int divider = numberDigits % 10;
            if (divider == 0) {
                return false;
            }
            if (number % divider != 0) {
                return false;
            }
            numberDigits /= 10;
        }
        return true;
    }

}
