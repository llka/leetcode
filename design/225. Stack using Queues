/*
https://leetcode.com/problems/implement-stack-using-queues/description/
Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Notes:
You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.

*/

class MyStack {
    private Queue<Integer> queue;
    int size = 0;

    /**
     * Initialize your data structure here.
     */
    public MyStack() {
        queue = new ArrayDeque<>();
    }

    /**
     * Push element x onto stack.
     */
    public void push(int x) {
        queue.add(x);
        size++;
    }

    /**
     * Removes the element on top of the stack and returns that element.
     */
    public int pop() {
        for (int i = 0; i < size - 1; i++) {
            int temp = queue.poll();
            queue.add(temp);
        }
        size--;
        return queue.poll();
    }

    /**
     * Get the top element.
     */
    public int top() {

        for (int i = 0; i < size - 1; i++) {
            int temp = queue.poll();
            queue.add(temp);
        }
        int top = queue.poll();
        queue.add(top);
        return top;
    }

    /**
     * Returns whether the stack is empty.
     */
    public boolean empty() {
        return queue.isEmpty();
    }
}
