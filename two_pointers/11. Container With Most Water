/*
Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai).
 n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0).
 Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2.

Example:
8    |         |
7    |         |   |
6    | |       |   |
5    | |   |   |   |
4    | |   | | |   |
3    | |   | | |   |
2    | |   | | | | |
1    | | | | | | | |
0__|_|_|_|_|_|_|_|_|
   1 8 6 2 5 4 8 3 7

Input: [1,8,6,2,5,4,8,3,7]
Output: 49

*/

/*
Idea: 2 pointers
--> (curr > max ?)  <--
*/


class Solution {
    public int maxArea(int[] height) {
        int maxArea = 0;
        int leftIdx = 0;
        int rightIdx = height.length - 1;

        while (rightIdx > leftIdx) {
            maxArea = Math.max(maxArea,(rightIdx - leftIdx) * Math.min(height[leftIdx], height[rightIdx]));
            if (height[leftIdx] < height[rightIdx]) {
                leftIdx++;
            } else {
                rightIdx--;
            }
        }
        return maxArea;
    }
}


