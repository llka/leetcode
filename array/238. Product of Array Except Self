/*
Given an array nums of n integers where n > 1,return an array output
such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]

Constraint: It's guaranteed that the product of the elements of any prefix or suffix
of the array (including the whole array) fits in a 32 bit integer.

Note: Please solve it without division and in O(n).
*/

class Solution {

    public int[] productExceptSelf(int[] nums) {
        int[] leftProducts = new int[nums.length];
        int[] rightProducts = new int[nums.length];
        int[] result = new int[nums.length];
        
        leftProducts[0] = 1;
        for(int i = 1; i < nums.length; i++){
            leftProducts[i] = leftProducts[i-1] * nums [i - 1];
        }
        // leftProducts = [1,1,2,6]
        
        rightProducts[nums.length - 1] = 1;
        for(int i = nums.length - 2; i >= 0; i--){
            rightProducts[i] = rightProducts[i+1] * nums[i + 1];
        }
        // rightProducts = [24,12,4,1]
        
        for(int i = 0; i < nums.length; i++){
            result[i] = leftProducts[i] * rightProducts[i];
        }
    
        return result;
    }


    public int[] productExceptSelf(int[] nums) {
        int[] result = new int[nums.length];
        result[0] = 1;
        for (int i = 1; i < nums.length; i++) {
            result[i] = result[i - 1] * nums[i - 1];
        }
        int right = 1;
        for (int i = nums.length - 1; i >= 0; i--) {
            result[i] *= right;
            right *= nums[i];
        }
        return result;
    }
}
