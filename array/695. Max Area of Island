class Solution {
    
    class Point {
        int i;
        int j;

        int square;

        public Point(int i, int j) {
            this.i = i;
            this.j = j;
        }

        public int getSquare() {
            return square;
        }

        public void setSquare(int square) {
            this.square = square;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Point point = (Point) o;
            return i == point.i &&
                    j == point.j;
        }

        @Override
        public int hashCode() {

            return Objects.hash(i, j);
        }
    }
    
        public int maxAreaOfIsland(int[][] grid) {
        int maxArea = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == 1) {
                    int current = 0;
                    Queue<Point> queue = new ArrayDeque<Point>();
                    queue.add(new Point(i, j));
                    while (!queue.isEmpty()) {
                        Point point = queue.poll();
                        grid[point.i][point.j] = 0;
                        current++;
                        if (point.i + 1 < grid.length) {
                            if (grid[point.i + 1][point.j] == 1) {
                                if (!queue.contains(new Point(point.i + 1, point.j))) {
                                    queue.add(new Point(point.i + 1, point.j));
                                }
                            }
                        }
                        if (point.j + 1 < grid[point.i].length) {
                            if (grid[point.i][point.j + 1] == 1) {
                                if (!queue.contains(new Point(point.i, point.j + 1))) {
                                    queue.add(new Point(point.i, point.j + 1));
                                }
                            }
                        }
                        if (point.i - 1 >= 0) {
                            if (grid[point.i - 1][point.j] == 1) {
                                if (!queue.contains(new Point(point.i - 1, point.j))) {
                                    queue.add(new Point(point.i - 1, point.j));
                                }
                            }
                        }
                        if (point.j - 1 >= 0) {
                            if (grid[point.i][point.j - 1] == 1) {
                                if (!queue.contains(new Point(point.i, point.j - 1))) {
                                    queue.add(new Point(point.i, point.j - 1));
                                }
                            }
                        }
                    }
                    if (current > maxArea) {
                        maxArea = current;
                    }
                }
            }
        }
        return maxArea;
    }
}
