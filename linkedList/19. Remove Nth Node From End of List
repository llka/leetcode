/*
Given a linked list, remove the n-th node from the end of list and return its head.

Example:
Given linked list: 1->2->3->4->5, and n = 2.

After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:

Given n will always be valid.

Follow up:
Could you do this in one pass?
*/

public ListNode removeNthFromEnd(ListNode head, int n) {
        int length = 0;
        ListNode curr = head;
        while (curr != null) {
            curr = curr.next;
            length++;
        }
        int i = 0;
        int toBeDeleted = length - n;
        ListNode prev = null;
        curr = head;
        while (i <= toBeDeleted) {
            if (i == toBeDeleted) {
                if (prev != null) {
                    prev.next = curr.next;
                } else {
                    head = curr.next;
                }
                return head;
            }
            prev = curr;
            curr = curr.next;
            i++;
        }
        return null;
        
    }
