/*
Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
*/

/*
Idea: Merge Sort for linked list.
Linked list can be devided into 2 lists not exactly from the middle.

devide into 2 lists
    4 2 3 1
  4 3     2 1
4    3   2    1

merge sorted lists
  2 4      1 3
    1 2 3 4
*/

class Solution {
   
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode a = new ListNode(head.val);
        ListNode aHead = a;
        ListNode b = new ListNode(head.next.val);
        ListNode bHead = b;

        head = head.next.next;

        divideLinkedListInto2Lists(head, a, b);

        a = sortList(aHead);
        b = sortList(bHead);

        return mergeSortedLinkedLists(a, b);
    }

    private void divideLinkedListInto2Lists(ListNode head, ListNode a, ListNode b) {
        if (head == null) {
            return;
        } else {
            while (head != null) {
                a.next = new ListNode(head.val);
                a = a.next;
                head = head.next;
                if (head != null) {
                    b.next = new ListNode(head.val);
                    b = b.next;
                    head = head.next;
                }
            }
        }
    }

    private ListNode mergeSortedLinkedLists(ListNode a, ListNode b) {
        if (a == null) return b;
        if (b == null) return a;

        ListNode merged;
        if (a.val < b.val) {
            merged = a;
            a = a.next;
        } else {
            merged = b;
            b = b.next;
        }
        ListNode headRef = merged;

        while (a != null || b != null) {
            if (a != null && b != null) {
                if (a.val < b.val) {
                    merged.next = a;
                    a = a.next;
                } else {
                    merged.next = b;
                    b = b.next;
                }
            } else if (a != null) {
                merged.next = a;
                a = a.next;
            } else if (b != null) {
                merged.next = b;
                b = b.next;
            } else {
                return headRef;
            }
            merged = merged.next;
        }
        return headRef;
    }
           
}














/*
Bad solution N^2

public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        boolean needToBeSorted = false;
        ListNode curr = head;
        while (curr != null) {
            ListNode next = curr.next;
            if (next == null) {
                if (needToBeSorted) {
                    return sortList(head);
                } else {
                    return head;
                }
            }

            if (curr.val > next.val) {
                needToBeSorted = true;
                swapValues(curr, curr.next);
            }
            curr = curr.next;
        }
        if (needToBeSorted) {
            return sortList(head);
        } else {
            return head;
        }
    }
    
     private void swapValues(ListNode a, ListNode b) {
        a.val = a.val + b.val;
        b.val = a.val - b.val;
        a.val = a.val - b.val;
    }

*/
