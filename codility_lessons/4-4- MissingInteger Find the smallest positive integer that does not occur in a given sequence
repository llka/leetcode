/*
MissingInteger
Find the smallest positive integer that does not occur in a given sequence.
*/

/*Detected time complexity:O(N) or O(N * log(N))*/

class Solution {
    public int solution(int[] A) {
        boolean[] occurred = new boolean[1000001];
        boolean hasPositive = false;
        for (int i = 0; i < A.length; i++) {
            if (A[i] > 0) {
                occurred[A[i]] = true;
                hasPositive = true;
            }
        }
        if (!hasPositive) {
            return 1;
        } else {
            for (int i = 1; i < occurred.length; i++) {
                if (!occurred[i]) {
                    return i;
                }
            }
        }
        return occurred.length;
    }
}

/*
Task description
This is a demo task.

Write a function:

class Solution { public int solution(int[] A); }

that, given an array A of N integers, returns the smallest positive integer (greater than 0) that does not occur in A.

For example, given A = [1, 3, 6, 4, 1, 2], the function should return 5.

Given A = [1, 2, 3], the function should return 4.

Given A = [−1, −3], the function should return 1.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [−1,000,000..1,000,000].
*/
