/*
GenomicRangeQuery
Find the minimal nucleotide from a range of sequence DNA
*/

// prefix sums O(N+M)
class Solution {
public int[] solution(String S, int[] P, int[] Q) {
        int[] min = new int[P.length];
        char[] DNA = S.toCharArray();
        int[][] prefixSums = new int[4][DNA.length + 1];

        for (int i = 0; i < DNA.length; i++) {
            char letter = DNA[i];
            int[] letters = new int[4];
            switch (letter) {
                case 'A':
                    letters[0] = 1;
                    break;
                case 'C':
                    letters[1] = 1;
                    break;
                case 'G':
                    letters[2] = 1;
                    break;
                case 'T':
                    letters[3] = 1;
                    break;
            }
            for (int j = 0; j < 4; j++) {
                prefixSums[j][i + 1] = prefixSums[j][i] + letters[j];
            }
        }
        
        for (int i = 0; i < P.length; i++) {
            int fromIdx = P[i];
            int toIdx = Q[i] + 1; /* if P[i] == Q[i] */
            for (int num = 0; num < 4; num++) {
                if (prefixSums[num][toIdx] - prefixSums[num][fromIdx] > 0) {
                    min[i] = num + 1;
                    break;
                }
            }
        }
        return min;
    }
}

// dp - O(N*M)
public int[] solution(String S, int[] P, int[] Q) {
        int[] min = new int[P.length];
        char[] DNA = S.toCharArray();
        int[] A = new int[DNA.length];
        int[][] dp = new int[A.length][A.length];

        for (int i = 0; i < DNA.length; i++) {
            char letter = DNA[i];
            int num = 0;
            switch (letter) {
                case 'A':
                    num = 1;
                    break;
                case 'C':
                    num = 2;
                    break;
                case 'G':
                    num = 3;
                    break;
                case 'T':
                    num = 4;
                    break;
            }
            A[i] = num;
        }

        for (int i = 0; i < A.length; i++) {
            for (int j = i; j < A.length; j++) {
                if (j >= 1 && i != j) {
                    dp[i][j] = Math.min(dp[i][j - 1], A[j]);
                } else {
                    dp[i][j] = A[j];
                }
            }
        }

        for (int i = 0; i < P.length; i++) {
            min[i] = dp[P[i]][Q[i]];
        }
        return min;
    }
    
    
/*
Task description
A DNA sequence can be represented as a string consisting of the letters A, C, G and T, which correspond to the types of successive nucleotides in the sequence. Each nucleotide has an impact factor, which is an integer. Nucleotides of types A, C, G and T have impact factors of 1, 2, 3 and 4, respectively. You are going to answer several queries of the form: What is the minimal impact factor of nucleotides contained in a particular part of the given DNA sequence?

The DNA sequence is given as a non-empty string S = S[0]S[1]...S[N-1] consisting of N characters. There are M queries, which are given in non-empty arrays P and Q, each consisting of M integers. The K-th query (0 ≤ K < M) requires you to find the minimal impact factor of nucleotides contained in the DNA sequence between positions P[K] and Q[K] (inclusive).

For example, consider string S = CAGCCTA and arrays P, Q such that:

    P[0] = 2    Q[0] = 4
    P[1] = 5    Q[1] = 5
    P[2] = 0    Q[2] = 6
The answers to these M = 3 queries are as follows:

The part of the DNA between positions 2 and 4 contains nucleotides G and C (twice), whose impact factors are 3 and 2 respectively, so the answer is 2.
The part between positions 5 and 5 contains a single nucleotide T, whose impact factor is 4, so the answer is 4.
The part between positions 0 and 6 (the whole string) contains all nucleotides, in particular nucleotide A whose impact factor is 1, so the answer is 1.
Write a function:

class Solution { public int[] solution(String S, int[] P, int[] Q); }

that, given a non-empty string S consisting of N characters and two non-empty arrays P and Q consisting of M integers, returns an array consisting of M integers specifying the consecutive answers to all queries.

Result array should be returned as an array of integers.

For example, given the string S = CAGCCTA and arrays P, Q such that:

    P[0] = 2    Q[0] = 4
    P[1] = 5    Q[1] = 5
    P[2] = 0    Q[2] = 6
the function should return the values [2, 4, 1], as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
M is an integer within the range [1..50,000];
each element of arrays P, Q is an integer within the range [0..N − 1];
P[K] ≤ Q[K], where 0 ≤ K < M;
string S consists only of upper-case English letters A, C, G, T.
*/
